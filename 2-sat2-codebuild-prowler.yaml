AWSTemplateFormatVersion: 2010-09-09
Description: Self-Service Security Assessment Solutions (v2)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: SATv2 options
        Parameters:
          - ProwlerScanType
          - MultiAccountScan
          - Reporting
          - EmailAddress
      - Label:
          default: Advanced options
        Parameters:
          - ConcurrentAccountScans
          - CodeBuildTimeout
          - MultiAccountListOverride
          - ProwlerOptions
          - ProwlerRole
          
    ParameterLabels:
      ProwlerOptions:
        default: Prowler options
      ProwlerScanType:
        default: Prowler scan type
      ProwlerRole:
        default: Prowler role
      MultiAccountScan:
        default: Multi-Account scan
      MultiAccountListOverride:
        default: Multi-Account list override
      EmailAddress:
        default: (Optional) Email address
      Reporting:
        default: Reporting
      ConcurrentAccountScans:
        default: Concurrent account scans
      CodeBuildTimeout:
        default: CodeBuild timeout

Parameters:
  ProwlerOptions:
    Description: 'Specify the parameters for Prowler. The --role and ARN will automatically be added to the end of the parameters you specify.'
    Type: String
    Default: aws --ignore-exit-code-3
  ProwlerScanType:
    Description: 'Specify which type of scan to perform. A basic scan runs 13 checks. An Intermediate scan runs all 109+ critical and high checks. A Full scan runs all 383+ checks.'
    Type: String
    AllowedValues:
      - 'Basic'
      - 'Intermediate'
      - 'Full'
    Default: 'Basic'
  ProwlerRole:
    Description: 'The role that Prowler should assume to perform the scan.'
    Type: String
    Default: ProwlerMemberRole
  MultiAccountScan:
    Description: 'Set this to true if you want to scan all accounts in your organization. You must have deployed the prerequisite template to provision a role, or specify a different ProwlerRole with the appropriate permissions.'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  MultiAccountListOverride:
    Description: 'Specify a space delimited list of accounts to scan. Leaving this blank will scan all accounts in your organization.'
    Type: String
    Default: ''
  EmailAddress:
    Description: 'Specify an address if you want to receive an email when the scan completes.'
    Type: String
    Default: ''
  Reporting:
    Description: 'Set this to true if you want to summarize the Prowler reports using Amazon Athena. This is helpful when scanning multiple accounts.'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  ConcurrentAccountScans:
    Description: 'For multi-account scans, specify the number of accounts to scan concurrently. This is useful for large organizations with many accounts. Selecting more than three may incur additional costs.'
    Type: String
    AllowedValues:
      - 'Three'
      - 'Six'
      - 'Twelve'
      - 'FortyEight'
    Default: 'Three'
  CodeBuildTimeout:
    Description: 'Set the timeout for the CodeBuild job. The default is 300 minutes (5 hours).'
    Type: Number
    MinValue: 5
    MaxValue: 2160
    Default: 300
  
Conditions:
  CreateProwlerRole: !Equals
    - !Ref MultiAccountScan
    - false

  CreateEmailNotification: !Not [!Equals [!Ref EmailAddress, '']]

  EnableReporting: !Equals 
    - !Ref Reporting
    - true

Mappings:
  ProwlerScanParameters:
    Basic:
      ProwlerOptions: > 
        -c 
        account_maintain_current_contact_details 
        awslambda_function_using_supported_runtimes 
        cloudtrail_multi_region_enabled 
        config_recorder_all_regions_enabled 
        ec2_securitygroup_allow_ingress_from_internet_to_any_port 
        guardduty_is_enabled 
        iam_password_policy_lowercase 
        iam_password_policy_number 
        iam_password_policy_symbol 
        iam_password_policy_uppercase 
        iam_root_mfa_enabled 
        iam_rotate_access_key_90_days 
        s3_bucket_public_access 
    Intermediate:
      ProwlerOptions: --severity critical high
    Full:
      ProwlerOptions: ''
  CodeBuildPerformanceOptionMap:
    Three:
      ParallelAccounts: 3
      CodeBuildComputeType: BUILD_GENERAL1_SMALL
    Six:
      ParallelAccounts: 6
      CodeBuildComputeType: BUILD_GENERAL1_MEDIUM
    Twelve:
      ParallelAccounts: 12
      CodeBuildComputeType: BUILD_GENERAL1_LARGE
    FortyEight:
      ParallelAccounts: 48
      CodeBuildComputeType: BUILD_GENERAL1_XLARGE

Resources:
  #This is the role that CodeBuild assumes to perform the Prowler scan
  ProwlerIntegrationCodeBuildRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Role allows * in resource policy. The role needs broad, read-only privileges to review all resources. Only the CodeBuild role created as part of this solution can assume this role.
          - id: W28
            reason: Resource has an explicit name so Prowler can loop through and assume it in each account.
          - id: W76
            reason: SPCM for IAM policy is higher than 25 due to managed polices, and additional polices. Each section of the role has a comment with the Prowler documentation describing the need for the privileges. 
    Condition: CreateProwlerRole
    Type: 'AWS::IAM::Role'
    Properties:
      Path: '/service-role/'
      RoleName: ProwlerMemberRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root' 
            Action:
              - 'sts:AssumeRole'
            Condition:
              ArnEquals:
                aws:PrincipalArn: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/ProwlerCodeBuildRole
      ManagedPolicyArns:
      # Prowler requires these managed polices to perform all the checks
      # https://docs.prowler.cloud/en/latest/getting-started/requirements/
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/SecurityAudit'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/job-function/ViewOnlyAccess'
      Policies:
      # Prowler requires these additional read-only permissions. They are documented in the Prowler documentation.
      # https://github.com/prowler-cloud/prowler/blob/master/permissions/prowler-additions-policy.json
        - PolicyName: ProwlerAdditions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - account:Get*
                - appstream:Describe*
                - appstream:List*
                - backup:List*
                - cloudtrail:GetInsightSelectors
                - codeartifact:List*
                - codebuild:BatchGet*
                - cognito-idp:GetUserPoolMfaConfig
                - dlm:Get*
                - drs:Describe*
                - ds:Get*
                - ds:Describe*
                - ds:List*
                - dynamodb:GetResourcePolicy
                - ec2:GetEbsEncryptionByDefault
                - ec2:GetSnapshotBlockPublicAccessState
                - ec2:GetInstanceMetadataDefaults
                - ecr:Describe*
                - ecr:GetRegistryScanningConfiguration
                - elasticfilesystem:DescribeBackupPolicy
                - glue:GetConnections
                - glue:GetSecurityConfiguration*
                - glue:SearchTables
                - lambda:GetFunction*
                - lightsail:GetRelationalDatabases
                - logs:FilterLogEvents
                - macie2:GetMacieSession
                - s3:GetAccountPublicAccessBlock
                - shield:DescribeProtection
                - shield:GetSubscriptionState
                - securityhub:BatchImportFindings
                - securityhub:GetFindings
                - ssm:GetDocument
                - ssm-incidents:List*
                - support:Describe*
                - tag:GetTagKeys
                - wellarchitected:List*
                Effect: Allow
                Resource: '*'
              - Action:
                - apigateway:GET
                Effect: Allow
                Resource:
                - !Sub arn:${AWS::Partition}:apigateway:*::/restapis/*
                - !Sub arn:${AWS::Partition}:apigateway:*::/apis/*

  ProwlerFindingsBucket:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: No bucket logging needed.
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain 
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
           EventBridgeConfiguration:
                EventBridgeEnabled: !If [ EnableReporting, true, false ]
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  ProwlerFindingsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref ProwlerFindingsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowSSLRequestsOnly
            Principal: '*'
            Action: 's3:*'
            Effect: Deny
            Resource:
              - !Sub '${ProwlerFindingsBucket.Arn}'
              - !Sub '${ProwlerFindingsBucket.Arn}/*'
            Condition:
              Bool:
                aws:SecureTransport: false

  CodeBuildStartBuild:
    Type: Custom::CodeBuildStartBuild
    Properties:
      ServiceToken: !GetAtt CodeBuildStartBuildLambda.Arn
      ProjectName: !Ref ProwlerCodeBuild

  CodeBuildStartBuildLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub ${AWS::AccountId}
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StartBuildInline
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'codebuild:StartBuild'
                Resource: !GetAtt ProwlerCodeBuild.Arn

  CodeBuildStartBuildLogsGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: CloudWatch Logs protects data at rest using encryption. All log groups are encrypted. By default, the CloudWatch Logs service manages the server-side encryption keys.
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CodeBuildStartBuildLambda}'
      RetentionInDays: 7

  CodeBuildStartBuildLambda:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: The CodeBuildStartBuildLambdaRole gives Lambda access to write CloudWatch logs.
          - id: W89
            reason: Lambda is not deployed inside of a VPC. The Lambda function is used to start the CodeBuild job as a custom CloudFormation resource.
          - id: W92
            reason: Reserved concurrent executions is not set.
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !Sub ${CodeBuildStartBuildLambdaRole.Arn}
      Timeout: 120
      Runtime: python3.10
      Code:
        ZipFile: |
          import os
          import boto3
          from botocore.exceptions import ClientError
          import cfnresponse
                    
          def startBuild(event, context):
            responseData = {}
            cb = boto3.client('codebuild')
            try:
              print("Starting build...")
              response = cb.start_build(projectName=event['ResourceProperties']['ProjectName'])
              responseData['buildID'] = response['build']['id']
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            except ClientError as e:
              print("Failed to start build")
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, e.response)

          def no_op(event, context):
            responseData = {}
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

          def lambda_handler(event,context):
            print(event)
            if event['RequestType'] == 'Create':
              startBuild(event, context)
            else:
              no_op(event,context)

#This is the role that has privileges to assume Prowler member roles
  ProwlerCodeBuildRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: ListAccounts does not support resource types.
          - id: W28
            reason: This role is given an explicit name to further restrict the more permissive ProwlerMemberRole to only be assumed by this role.
    Type: AWS::IAM::Role
    Properties:
      Path: '/service-role/'
      RoleName: ProwlerCodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Condition:
              StringEquals:
                aws:SourceArn: !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/ProwlerCodeBuild'
      Policies:
        - PolicyName: LogGroup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
        - PolicyName: UploadtoS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:PutObject
                Effect: Allow
                Resource: !Sub '${ProwlerFindingsBucket.Arn}/*'
        - PolicyName: AssumeRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - sts:AssumeRole
                Effect: Allow
                Resource: !Sub 'arn:${AWS::Partition}:iam::*:role/service-role/ProwlerMemberRole'
        - PolicyName: ListOrganizationAccounts
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - organizations:ListAccounts
                Effect: Allow
                Resource: '*'

  ProwlerCodeBuild:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W32
            reason: CodeBuild uses the managed KMS key for S3.
    Type: AWS::CodeBuild::Project
    Properties:
      Name: ProwlerCodeBuild
      Environment:
        ComputeType: !FindInMap [CodeBuildPerformanceOptionMap, !Ref ConcurrentAccountScans, 'CodeBuildComputeType']
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: BUCKET_REPORT
            Value: !Ref ProwlerFindingsBucket
            Type: PLAINTEXT
          - Name: PROWLER_OPTIONS
            Value: !Ref 'ProwlerOptions'
            Type: PLAINTEXT
          - Name: PROWLER_SCAN_OPTIONS
            Value: !FindInMap [ProwlerScanParameters, !Ref ProwlerScanType, 'ProwlerOptions']
            Type: PLAINTEXT
          - Name: PROWLER_ROLE
            Value: !Ref ProwlerRole
            Type: PLAINTEXT
          - Name: MULTI_ACCOUNT_SCAN
            Value: !Ref MultiAccountScan
            Type: PLAINTEXT
          - Name: MULTI_ACCOUNT_LIST_OVERRIDE
            Value: !Ref MultiAccountListOverride
            Type: PLAINTEXT
          - Name: AWS_PARTITION
            Value: !Sub ${AWS::Partition}
            Type: PLAINTEXT
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
            Type: PLAINTEXT
          - Name: PARALLEL_ACCOUNTS
            Value: !FindInMap [CodeBuildPerformanceOptionMap, !Ref ConcurrentAccountScans, 'ParallelAccounts']
            Type: PLAINTEXT
      Description: Run Prowler assessment
      ServiceRole: !GetAtt ProwlerCodeBuildRole.Arn
      TimeoutInMinutes: !Ref CodeBuildTimeout
      Artifacts:
        Type: NO_ARTIFACTS
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.11
              commands:
                - echo "Installing Prowler and dependencies..."
                - pip3 install prowler
                - prowler -v
            build:
              commands:
                - |

                  if [[ $MULTI_ACCOUNT_SCAN = 'true' ]]; then

                      echo "Running multi-account scan."

                      if [[ $MULTI_ACCOUNT_LIST_OVERRIDE != '' ]]; then
                          echo "Using account overrides."    
                          account_list=$MULTI_ACCOUNT_LIST_OVERRIDE
                      elif [[ $MULTI_ACCOUNT_LIST_OVERRIDE = '' ]]; then
                          echo "Using accounts from aws organizations." 
                          account_list=$(aws organizations list-accounts --query 'Accounts[?Status==`ACTIVE`].Id' --output text)
                      fi
                      
                      echo "Using accounts $account_list."

                      for accountId in $account_list; do
                          test "$(jobs | wc -l)" -ge $PARALLEL_ACCOUNTS && wait || true
                          {
                              echo "Running Prowler as prowler $PROWLER_OPTIONS $PROWLER_SCAN_OPTIONS --role arn:$AWS_PARTITION:iam::$accountId:role/service-role/$PROWLER_ROLE "
                              prowler $PROWLER_OPTIONS $PROWLER_SCAN_OPTIONS --role arn:$AWS_PARTITION:iam::$accountId:role/service-role/$PROWLER_ROLE 
                          } &
                      done

                  elif [[ $MULTI_ACCOUNT_SCAN != 'true' ]]; then

                      echo "Running a single account scan."
                      echo "Running Prowler as prowler $PROWLER_OPTIONS $PROWLER_SCAN_OPTIONS --role arn:$AWS_PARTITION:iam::$AWS_ACCOUNT_ID:role/service-role/$PROWLER_ROLE "
                      prowler $PROWLER_OPTIONS $PROWLER_SCAN_OPTIONS --role arn:$AWS_PARTITION:iam::$AWS_ACCOUNT_ID:role/service-role/$PROWLER_ROLE 

                  fi

                  wait   
            post_build:
              commands:
                - echo "Uploading reports to S3..."
                - aws s3 cp --exclude "*" --include "*.csv" --exclude "compliance**" output/ s3://$BUCKET_REPORT/csv/ --recursive
                - aws s3 cp --exclude "*" --include "*.csv" output/compliance/ s3://$BUCKET_REPORT/compliance/ --recursive
                - aws s3 cp --exclude "*" --include "*.ocsf.json" output/ s3://$BUCKET_REPORT/ocsf-json/ --recursive
                - aws s3 cp --exclude "*" --include "*.json" --exclude "*.ocsf.json" --exclude "*.asff.json" output/ s3://$BUCKET_REPORT/json/ --recursive
                - aws s3 cp --exclude "*" --include "*.html" output/ s3://$BUCKET_REPORT/html/ --recursive
                - aws s3 cp --exclude "*" --include "*.asff.json" output/ s3://$BUCKET_REPORT/asff-json/ --recursive
                - echo "Done!"

  ProwlerLogGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: CloudWatch Logs protects data at rest using encryption. All log groups are encrypted. By default, the CloudWatch Logs service manages the server-side encryption keys.
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/codebuild/${ProwlerCodeBuild}'
      RetentionInDays: 7

  ProwlerScanNotificationTopic:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W47
            reason: Topic is used to send notification that the scan is done. Topic does not use AWS KMS CMK or default key. If SNS uses the default AWS KMS key alias/aws/sns, then EventBridge can't publish messages to the SNS topic. The default KMS key policy for SNS doesn't allow EventBridge kms:decrypt and kms:GenerateDataKey.
    Condition: CreateEmailNotification
    Type: AWS::SNS::Topic
    Properties:
      Subscription: 
        - Endpoint: !Ref EmailAddress
          Protocol: email
  
  ProwlerSnsNotificationsPolicy:
    Condition: CreateEmailNotification
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: snsNotificationsPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: Allow events
            Effect: Allow
            Principal:
              Service: 'events.amazonaws.com'
            Action:
              - sns:Publish
            Resource: !Ref ProwlerScanNotificationTopic
      Topics:
        - !Ref ProwlerScanNotificationTopic

  CodeBuildStateChangeRule:
    Condition: CreateEmailNotification
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source:
          - aws.codebuild
        detail-type:
          - CodeBuild Build State Change
        detail:
          build-status:
            - SUCCEEDED
            - FAILED
            - STOPPED
          project-name:
            - !Ref ProwlerCodeBuild
      State: ENABLED
      Targets:
        - Id: toSNS
          Arn: !Ref ProwlerScanNotificationTopic
          InputTransformer:
            InputPathsMap:
              build-status: $.detail.build-status
              bucket: $.detail.additional-information.environment.environment-variables[0].value
            InputTemplate: >-
              "The Prowler scan has <build-status>."

              "You can view your results in the <bucket> bucket."

  GlueDatabaseSATv2Findings:
    Condition: EnableReporting
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Ref ProwlerFindingsBucket
        Description: !Sub "SATv2 assessment results in the ${ProwlerFindingsBucket}"

  GlueTableProwlerResults:
    Condition: EnableReporting
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDatabaseSATv2Findings
      TableInput:
        Name: "prowler"
        Description: "Results of the Prowler scan from SATv2"
        TableType: EXTERNAL_TABLE
        Parameters: {
            "skip.header.line.count": "1",
            "classification": "csv",
          }    
        StorageDescriptor:
          Columns:
            - Name: auth_method
              Type: string
            - Name: timestamp
              Type: string
            - Name: account_uid
              Type: string
            - Name: account_namse
              Type: string
            - Name: account_email
              Type: string
            - Name: account_organization_uid
              Type: string
            - Name: account_organization_name
              Type: string
            - Name: account_tags
              Type: string
            - Name: finding_uid
              Type: string
            - Name: provider
              Type: string
            - Name: check_id
              Type: string
            - Name: check_title
              Type: string
            - Name: check_type
              Type: string
            - Name: status
              Type: string
            - Name: status_extended
              Type: string
            - Name: muted
              Type: boolean
            - Name: service_name
              Type: string
            - Name: subservice_name
              Type: string
            - Name: severity
              Type: string
            - Name: resource_type
              Type: string
            - Name: resource_uid
              Type: string
            - Name: resource_name
              Type: string
            - Name: resource_details
              Type: string
            - Name: resource_tags
              Type: string
            - Name: partition
              Type: string
            - Name: region
              Type: string
            - Name: description
              Type: string
            - Name: risk
              Type: string
            - Name: related_url
              Type: string
            - Name: remediation_recommendation_text
              Type: string
            - Name: remediation_recommendation_url
              Type: string
            - Name: remediation_code_nativeiac
              Type: string
            - Name: remediation_code_terraform
              Type: string
            - Name: remediation_code_cli
              Type: string
            - Name: remediation_code_other
              Type: string
            - Name: compliance
              Type: string
            - Name: categories
              Type: string
            - Name: depends_on
              Type: string
            - Name: related_to
              Type: string
            - Name: notes
              Type: string
            - Name: prowler_version
              Type: string
          Location: !Sub s3://${ProwlerFindingsBucket}/csv
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Compressed: False
          StoredAsSubDirectories: False
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.serde2.OpenCSVSerde
            Parameters: {
              "escapeChar": "\\",
              "quoteChar": "\"",
              "separatorChar": ";"
            }
        Retention: 0

  LakeFormationPermissionsLambda:
    Condition: EnableReporting
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !Sub ${AthenaStartQueryLambdaRole.Arn}
      Permissions: 
        - SELECT
      Resource:
        TableResource:
             DatabaseName: !Ref GlueDatabaseSATv2Findings
             Name: !Ref GlueTableProwlerResults

  SATv2Reporting:
    Condition: EnableReporting
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Ref GlueDatabaseSATv2Findings
      RecursiveDeleteOption: True
      State: ENABLED
      WorkGroupConfiguration:
        PublishCloudWatchMetricsEnabled: false
        RequesterPaysEnabled: false
        ResultConfiguration:
          OutputLocation: !Sub s3://${ProwlerFindingsBucket}/athena_results
        EnforceWorkGroupConfiguration: false

  qProwlerOrgSummary:
    Condition: EnableReporting
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref GlueDatabaseSATv2Findings
      Description: "Count the number of recommendations across all assessed accounts"
      Name: "Prowler organization summary"
      QueryString: !Sub |
        -- Count the number of recommendations across all assessed accounts.
          SELECT 
              check_id, 
              count(*) as count
          FROM 
              "${GlueDatabaseSATv2Findings}"."prowler"
          WHERE 
              status = 'FAIL'
          GROUP BY 
              check_id
          ORDER BY 
              count desc
      WorkGroup: !Ref SATv2Reporting

  AthenaStartQueryLambdaRole:
    Condition: EnableReporting
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub ${AWS::AccountId}
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AccessToAthena
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'athena:StartQueryExecution'
                Resource: !Sub arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${SATv2Reporting}
              - Effect: Allow
                Action:
                 - s3:GetBucketLocation
                 - s3:GetObject
                 - s3:ListBucket
                 - s3:ListBucketMultipartUploads
                 - s3:AbortMultipartUpload
                 - s3:PutObject
                 - s3:ListMultipartUploadPart
                Resource: 
                 - !GetAtt ProwlerFindingsBucket.Arn
                 - !Sub ${ProwlerFindingsBucket.Arn}/*
              - Effect: Allow
                Action:
                  - 'glue:GetTable'
                  - 'glue:GetDatabase'
                Resource:
                 - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
                 - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueDatabaseSATv2Findings}
                 - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${GlueDatabaseSATv2Findings}/${GlueTableProwlerResults}

  AthenaStartQueryLogGroup:
    Condition: EnableReporting
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: CloudWatch Logs protects data at rest using encryption. All log groups are encrypted. By default, the CloudWatch Logs service manages the server-side encryption keys.
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AthenaStartQueryLambda}'
      RetentionInDays: 7      

  AthenaStartQueryLambda:
    Condition: EnableReporting
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: The AthenaStartQueryLambdaRole gives Lambda access to write CloudWatch logs.
          - id: W89
            reason: Lambda is not deployed inside of a VPC. The Lambda function is used to start the CodeBuild job as a custom CloudFormation resource.
          - id: W92
            reason: Reserved concurrent executions is not set.
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !Sub ${AthenaStartQueryLambdaRole.Arn}
      Timeout: 120
      Environment:
        Variables:
          ATHENA_WORKGROUP: !Ref SATv2Reporting
          BUCKET_REPORT: !Ref ProwlerFindingsBucket
      Runtime: python3.10
      Code:
        ZipFile: |
          import os
          import boto3
          from botocore.exceptions import ClientError

          S3_BUCKET = os.environ['BUCKET_REPORT']
          WORKGROUP = os.environ['ATHENA_WORKGROUP']
                  
          def startQuery(event, context):
              responseData = {}
              athena = boto3.client('athena')
              try:
                print("Starting query...")
                response = athena.start_query_execution(
                    QueryString="""SELECT * FROM \"AwsDataCatalog\".\"{}\".\"prowler\"""".format(S3_BUCKET),
                    WorkGroup=WORKGROUP,
                    ResultConfiguration={'OutputLocation': f's3://{S3_BUCKET}/reports'}
                    )
                print(response)
              except ClientError as e:
                print("Failed to start query")
                print(e)

          def lambda_handler(event,context):
              print(event)
              startQuery(event, context)

  AthenaStartQueryLambdaInvokePermission:
    Condition: EnableReporting
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AthenaStartQueryLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CodeBuildCompleteRunSummary.Arn

  CodeBuildCompleteRunSummary:
    Condition: EnableReporting
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source:
          - aws.codebuild
        detail-type:
          - CodeBuild Build State Change
        detail:
          build-status:
            - SUCCEEDED
          project-name:
            - !Ref ProwlerCodeBuild
      State: ENABLED
      Targets:
        - Id: AthenaStartQueryLambda
          Arn: !GetAtt AthenaStartQueryLambda.Arn

  AthenaSummaryQueryStateChangeRule:
    Condition: CreateEmailNotification
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source:
          - aws.athena
        detail-type:
          - Athena Query State Change
        detail:
          currentState:
            - SUCCEEDED
            - FAILED
          workgroupName:
            - !Ref ProwlerFindingsBucket
      State: ENABLED
      Targets:
        - Id: toSNS
          Arn: !Ref ProwlerScanNotificationTopic
          InputTransformer:
            InputPathsMap:
              status: $.detail.currentState
            InputTemplate: !Sub >-
              "The query to summarize reporting has <status>."

              "You can view your results in the ${ProwlerFindingsBucket}/reports bucket."

# PPTX reporting
  ProwlerReportingLambdaRole:
    Condition: EnableReporting
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub ${AWS::AccountId}
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AccessToS3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                 - s3:GetBucketLocation
                 - s3:GetObject
                 - s3:ListBucket
                 - s3:ListBucketMultipartUploads
                 - s3:AbortMultipartUpload
                 - s3:PutObject
                 - s3:ListMultipartUploadPart
                Resource: 
                 - !GetAtt ProwlerFindingsBucket.Arn
                 - !Sub ${ProwlerFindingsBucket.Arn}/*
        - PolicyName: AccessToCodeBuild
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'codebuild:StartBuild'
                Resource: !GetAtt ProwlerReportingCodeBuild.Arn

  ProwlerReportingLogGroup:
    Condition: EnableReporting
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: CloudWatch Logs protects data at rest using encryption. All log groups are encrypted. By default, the CloudWatch Logs service manages the server-side encryption keys.
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProwlerReportingLambda}'
      RetentionInDays: 7      

  ProwlerReportingLambda:
    Condition: EnableReporting
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: The ProwlerReportingLambdaRole gives Lambda access to write CloudWatch logs.
          - id: W89
            reason: Lambda is not deployed inside of a VPC.
          - id: W92
            reason: Reserved concurrent executions is not set.
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !Sub ${ProwlerReportingLambdaRole.Arn}
      Timeout: 120
      Runtime: python3.10
      Code:
        ZipFile: |
          import boto3
          from botocore.exceptions import ClientError

          def startCodeBuildReport(event, context):
              print(event)
              
              bucket = event['detail']['bucket']['name']
              key = event['detail']['object']['key']
              full_path = f"s3://{bucket}/{key}"
              print(f"Summary CSV from Athena: {full_path}")
              
              cb = boto3.client('codebuild')
              try:
                print("Starting build...")
                response = cb.start_build(projectName='ProwlerReportingCodeBuild', \
                environmentVariablesOverride=[
                  {
                      'name': 'ATHENA_SUMMARY_CSV',
                      'value': full_path
                  }])
                print(response)
              except ClientError as e:
                print("Failed to start query")
                print(e)

          def lambda_handler(event,context):
              startCodeBuildReport(event, context)

  ProwlerReportingLambdaInvokePermission:
    Condition: EnableReporting
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ProwlerReportingLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ProwlerReportingS3Upload.Arn

  ProwlerReportingS3Upload:
    Condition: EnableReporting
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref ProwlerFindingsBucket
          object:
            key:
              - wildcard: reports/*.csv
      State: ENABLED
      Targets:
        - Id: toLambda
          Arn: !GetAtt ProwlerReportingLambda.Arn

  ProwlerReportingCodeBuildRole:
    Condition: EnableReporting
    Type: AWS::IAM::Role
    Properties:
      Path: '/service-role/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Condition:
              StringEquals:
                aws:SourceArn: !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/ProwlerReportingCodeBuild'
      Policies:
        - PolicyName: LogGroup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
        - PolicyName: AccessToS3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                 - s3:GetBucketLocation
                 - s3:GetObject
                 - s3:ListBucket
                 - s3:ListBucketMultipartUploads
                 - s3:AbortMultipartUpload
                 - s3:PutObject
                 - s3:ListMultipartUploadPart
                Resource: 
                 - !GetAtt ProwlerFindingsBucket.Arn
                 - !Sub ${ProwlerFindingsBucket.Arn}/*

  ProwlerReportingCodeBuild:
    Condition: EnableReporting
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W32
            reason: CodeBuild uses the managed KMS key for S3.
    Type: AWS::CodeBuild::Project
    Properties:
      Name: ProwlerReportingCodeBuild
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: ATHENA_SUMMARY_CSV
            Value: ""
            Type: PLAINTEXT
          - Name: BUCKET_REPORT
            Value: !Ref ProwlerFindingsBucket
            Type: PLAINTEXT  
      Description: Create Prowler report
      ServiceRole: !GetAtt ProwlerReportingCodeBuildRole.Arn
      TimeoutInMinutes: 60
      Artifacts:
        Type: NO_ARTIFACTS
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.11
              commands:
                - echo "Downloading repo..."
                - git clone https://github.com/awslabs/aws-security-assessment-solution.git
                - cd aws-security-assessment-solution/reporting
                - echo "Installing dependencies..."
                - pip3 install -r requirements.txt
            build:
              commands:
                - echo "Using Athena summary csv $ATHENA_SUMMARY_CSV"
                - aws s3 cp $ATHENA_SUMMARY_CSV .
                - python report.py
            post_build:
              commands:
                - echo "Uploading report to S3..."
                - aws s3 cp SHIP_v3_Updated.pptx s3://$BUCKET_REPORT/reports/
                - echo "Done!"

Outputs:
  AccountID: 
    Description: ID that Prowler is running from
    Value: !GetAtt ProwlerCodeBuildRole.Arn
